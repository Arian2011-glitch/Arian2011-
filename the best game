#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>
#include <iostream>
#include <vector>
#include <string>
#include <ctime>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const SDL_Color WHITE = {255, 255, 255};
const int TIME_LIMIT = 10; // Timp limită în secunde

struct Flag {
    std::string imageUrl;
    std::string countryName;
};

std::vector<Flag> flags = {
    {"https://flagcdn.com/w320/fr.png", "france"},
    {"https://flagcdn.com/w320/de.png", "germany"},
    {"https://flagcdn.com/w320/it.png", "italy"},
    {"https://flagcdn.com/w320/es.png", "spain"},
    {"https://flagcdn.com/w320/gb.png", "united kingdom"},
    {"https://flagcdn.com/w320/us.png", "united states"},
    {"https://flagcdn.com/w320/ca.png", "canada"},
    {"https://flagcdn.com/w320/jp.png", "japan"},
    {"https://flagcdn.com/w320/cn.png", "china"},
    {"https://flagcdn.com/w320/br.png", "brazil"},
    {"https://flagcdn.com/w320/in.png", "india"},
    {"https://flagcdn.com/w320/au.png", "australia"},
    {"https://flagcdn.com/w320/ru.png", "russia"},
    {"https://flagcdn.com/w320/mx.png", "mexico"},
    {"https://flagcdn.com/w320/za.png", "south africa"},
    {"https://flagcdn.com/w320/kr.png", "south korea"},
    {"https://flagcdn.com/w320/ar.png", "argentina"},
    {"https://flagcdn.com/w320/se.png", "sweden"},
    {"https://flagcdn.com/w320/ch.png", "switzerland"},
    {"https://flagcdn.com/w320/nl.png", "netherlands"}
};

bool init(SDL_Window*& window, SDL_Renderer*& renderer) {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) return false;
    window = SDL_CreateWindow("Guess the Flag", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (!window) return false;
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (!renderer) return false;
    IMG_Init(IMG_INIT_PNG);
    TTF_Init();
    return true;
}

void renderText(SDL_Renderer* renderer, TTF_Font* font, const std::string& text, int x, int y) {
    SDL_Surface* surface = TTF_RenderText_Solid(font, text.c_str(), WHITE);
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_Rect rect = {x, y, surface->w, surface->h};
    SDL_RenderCopy(renderer, texture, nullptr, &rect);
    SDL_FreeSurface(surface);
    SDL_DestroyTexture(texture);
}

int main() {
    SDL_Window* window = nullptr;
    SDL_Renderer* renderer = nullptr;
    if (!init(window, renderer)) return 1;
    
    TTF_Font* font = TTF_OpenFont("arial.ttf", 24);
    if (!font) return 1;
    
    int currentFlag = 0;
    std::string userInput = "";
    SDL_Event e;
    bool running = true;
    time_t startTime = time(nullptr);
    int score = 0;
    
    while (running) {
        while (SDL_PollEvent(&e)) {
            if (e.type == SDL_QUIT) running = false;
            else if (e.type == SDL_TEXTINPUT) userInput += e.text.text;
            else if (e.type == SDL_KEYDOWN && e.key.keysym.sym == SDLK_RETURN) {
                if (userInput == flags[currentFlag].countryName) {
                    score++;
                    currentFlag = (currentFlag + 1) % flags.size();
                    userInput = "";
                    startTime = time(nullptr); // Resetează timpul
                }
            }
        }
        
        // Verifică timpul rămas
        int elapsedTime = time(nullptr) - startTime;
        if (elapsedTime >= TIME_LIMIT) {
            currentFlag = (currentFlag + 1) % flags.size();
            userInput = "";
            startTime = time(nullptr);
        }
        
        SDL_RenderClear(renderer);
        SDL_Surface* flagSurface = IMG_Load(flags[currentFlag].imageUrl.c_str());
        SDL_Texture* flagTexture = SDL_CreateTextureFromSurface(renderer, flagSurface);
        SDL_Rect flagRect = {200, 100, 400, 300};
        SDL_RenderCopy(renderer, flagTexture, nullptr, &flagRect);
        SDL_FreeSurface(flagSurface);
        SDL_DestroyTexture(flagTexture);
        
        renderText(renderer, font, "Guess the country:", 300, 450);
        renderText(renderer, font, userInput, 300, 500);
        
        std::string timeLeft = "Time left: " + std::to_string(TIME_LIMIT - elapsedTime) + "s";
        renderText(renderer, font, timeLeft, 600, 50);
        
        std::string scoreText = "Score: " + std::to_string(score);
        renderText(renderer, font, scoreText, 50, 50);
        
        SDL_RenderPresent(renderer);
    }
    
    TTF_CloseFont(font);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    return 0;
}
